<?php
/** 
 * This class implement a stack of error mesages.
 * <br>Last update: September 20, 2009
 * <br>License: BSD
 * <br>Author: Marcelo Entraigas <marcelo [at] entraigas.com.ar>
 
 modifed & made working by mckoch@mckoch.de 11/2009.
 added: exception handler function
 added: constructor
 Part of Destiller ToolSet, 
 
 */
function generalErrorHandler($error, $errstring, $errfile, $errline, $errcontext){ //has to be defined BEFORE set_exception_handler.
	global $visualdebug, $ERROR, $logginglevel;
	if ($visualdebug) {
		switch ($error) {
			case 8: break;
			case 2: echo "<span class='warning'>$error</span>";	$ERROR->error($error);	break;
			case 4096: echo "<span class='note'>$error</span>";	$ERROR->error($error);	break;
			case 8192: echo "<span class='info'>$error</span>";	$ERROR->error($error);	break;
			default: echo "<span class='important'>$error</span>";	$ERROR->error($error);	break; 
		}
	} elseif ($error != 8) $ERROR->error($error[$errstring]);
	return true;
}
	
class Error {
	/**
	 * Set the error message
	 *
	 * @param string $Error
	 */
	function error($error='', $exit=false){
		set_exception_handler('generalErrorHandler');
		set_error_handler('generalErrorHandler');
		if (!isset($_SESSION['error']) || !is_array($_SESSION['error']))
			$_SESSION['error'] = array();
		if(!empty($error))
			$_SESSION['error'][] = $error;
		if($exit){
			echo $this->getErrors();
			exit;
		}
	}
	
	/**
	* Flush all errors
	*/
	function flushErrors() {
		$_SESSION['error'] = array();
	}
	
	/**
	* Returns a string error message
	*
	* @return string
	*/
	public function getErrors() {
	if ($this->countErrors()==0)
		return '';
	$html = implode("<br>", $_SESSION['error']);
	$this->flushErrors();
	return "<!--Errors--->\n<font face=arial size=3>" . $html . "</font>\n";
	}
	
	/**
	 * Coount the registered errors
	 *
	 * @return integer
	 */
	public function countErrors() {
		return count($_SESSION['error']);
	}
	
}

/* 
Predefined E_ERROR Constants

The constants below are always available as part of the PHP core.
Note: You may use these constant names in php.ini but not outside of PHP, like in httpd.conf, where you'd use the bitmask values instead. 

Errors and Logging Value 	Constant 	Description 	Note
1 	E_ERROR (integer) 	Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted. 	 
2 	E_WARNING (integer) 	Run-time warnings (non-fatal errors). Execution of the script is not halted. 	 
4 	E_PARSE (integer) 	Compile-time parse errors. Parse errors should only be generated by the parser. 	 
8 	E_NOTICE (integer) 	Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script. 	 
16 	E_CORE_ERROR (integer) 	Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP. 	since PHP 4
32 	E_CORE_WARNING (integer) 	Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP. 	since PHP 4
64 	E_COMPILE_ERROR (integer) 	Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine. 	since PHP 4
128 	E_COMPILE_WARNING (integer) 	Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine. 	since PHP 4
256 	E_USER_ERROR (integer) 	User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
512 	E_USER_WARNING (integer) 	User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
1024 	E_USER_NOTICE (integer) 	User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 4
2048 	E_STRICT (integer) 	Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 	since PHP 5
4096 	E_RECOVERABLE_ERROR (integer) 	Catchable fatal error. It indicates that a probably dangerous error occured, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 	since PHP 5.2.0
8192 	E_DEPRECATED (integer) 	Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	since PHP 5.3.0
16384 	E_USER_DEPRECATED (integer) 	User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 	since PHP 5.3.0
30719 	E_ALL (integer) 	All errors and warnings, as supported, except of level E_STRICT in PHP < 6. 	32767 in PHP 6, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously

The above values (either numerical or symbolic) are used to build up a bitmask that specifies which errors to report. You can use the bitwise operators to combine these values or mask out certain types of errors. Note that only '|', '~', '!', '^' and '&' will be understood within php.ini.
 */
 /* some usefull CSS: 
   .info { background: #f8f8f8; color: #666; padding: 10px; margin-bottom: 0.5em; font-size: 91.7%; }
  .note { background: #efe; color: #040; border: 2px #484 solid; padding: 10px; margin-bottom: 1em; }
  .important { background: #f2f; color: #440; border: 2px #884 solid; padding: 10px; margin-bottom: 1em; }
  .warning { background: #fee; color: #400; border: 2px #844 solid; padding: 10px; margin-bottom: 1em; }
 */
?>